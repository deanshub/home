version: "3"
networks:
  caddy:
    external: true

services:
  homeassistant:
    restart: unless-stopped
    container_name: homeassistant
    image: ghcr.io/home-assistant/home-assistant:stable
    environment:
      - TZ=Asia/Jerusalem
    volumes:
      - /media/external/homeassistant-config:/config
      - ./home-assistant/configuration.yaml:/config/configuration.yaml
      - /etc/localtime:/etc/localtime:ro
      - /media/external/library:/library
    privileged: true
    network_mode: host

  downloader:
    restart: unless-stopped
    container_name: downloader
    build: ./downloader
    # image:
    #environment:
    volumes:
      - /media/external:/media/external
    privileged: true

  friday:
    restart: unless-stopped
    container_name: friday
    build: ./friday
    # image:
    env_file:
      - ./friday/.env
    volumes:
      - /media/external:/media/external
    privileged: true

  auto-git:
    restart: unless-stopped
    user: root
    container_name: auto-git
    build: ./auto-git
    # image:
    env_file:
      - ./auto-git/.env
    ports:
      - 7005:7005
    volumes:
      - /media/external/auto-git/repos:/repos
      - /media/external/auto-git/apps:/apps
    networks:
      - caddy
    privileged: true

  gpt-bot:
    restart: unless-stopped
    container_name: gpt-bot
    build: ./gpt-bot
    # image:
    env_file:
      - ./gpt-bot/.env
    volumes:
      - /media/external:/media/external
    privileged: true

  caddy:
    # image: caddy:stable
    build: ./caddy
    restart: unless-stopped
    container_name: caddy
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile
      # - ./site:/srv
      - /media/external/caddy_data/:/data/
      - /media/external/caddy_config/:/config/
      - /media/external/auto-git/apps/:/apps/
    env_file:
      - ./caddy/.env
    networks:
      - caddy
    command:
      - caddy
      - run
      - "--config"
      - "/etc/caddy/Caddyfile"

  tailscale:
    restart: unless-stopped
    image: tailscale/tailscale
    privileged: true
    container_name: tailscale
    hostname: vpn.home.shubapp.com
    network_mode: host
    env_file: ./tailscale/.env
    environment:
      - TZ=Asia/Jerusalem
    cap_add: # Required for tailscale to work
      - net_admin
      - sys_module
    volumes:
      - /var/lib:/var/lib
      - /dev/net/tun:/dev/net/tun

  mosquitto:
    restart: unless-stopped
    image: eclipse-mosquitto:latest
    container_name: mosquitto
    networks:
      - caddy
    environment:
      - TZ=Asia/Jerusalem
    volumes:
      - /media/external/configs/mosquitto:/mosquitto
      - ./mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
    ports:
      - published: 1883
        target: 1883
    # env_file:
    #   - ./mosquitto/.env
    command: >
      sh -c '
        echo "${USER}:${PASSWORD}" > passwordfile &&
        mosquitto_passwd -U passwordfile &&
        mosquitto -c /mosquitto/config/mosquitto.conf
      '

  filebrowser:
    restart: unless-stopped
    image: filebrowser/filebrowser:s6
    container_name: filebrowser
    networks:
      - caddy
    # ports:
    #   - "8080:80"
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Asia/Jerusalem
    volumes:
      - /media/external/configs/filebrowser/settings:/config
      - /media/external/configs/filebrowser/db:/database
      - /media/external/library/downloads:/downloads
      - /media/external2/library/downloads:/downloads2
      - /media/external:/srv

  transmission:
    restart: unless-stopped
    container_name: transmission
    image: linuxserver/transmission
    networks:
      - caddy
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Asia/Jerusalem
    volumes:
      - /media/external/library/downloads:/downloads
      - /media/external2/library/downloads:/downloads2
      - /media/external/configs/transmission:/config

  jackett:
    restart: unless-stopped
    networks:
      - caddy
    image: linuxserver/jackett:latest
    container_name: jackett
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Asia/Jerusalem
    volumes:
      - /media/external/configs/jackett:/config

  flaresolverr:
    restart: unless-stopped
    networks:
      - caddy
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_HTML=${LOG_HTML:-false}
      - CAPTCHA_SOLVER=${CAPTCHA_SOLVER:-none}
      - TZ=Europe/London
    ports:
      - "${PORT:-8191}:8191"

  sonarr:
    restart: unless-stopped
    image: linuxserver/sonarr:latest
    container_name: sonarr
    networks:
      - caddy
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Asia/Jerusalem
    volumes:
      - /media/external/configs/sonarr:/config
      - /media/external/library/tv:/tv
      - /media/external/library/downloads:/downloads
      - /media/external2/library/downloads:/downloads2

  radarr:
    restart: unless-stopped
    image: linuxserver/radarr:latest
    container_name: radarr
    networks:
      - caddy
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Asia/Jerusalem
    volumes:
      - /media/external/configs/radarr:/config
      - /media/external/library/movies:/movies
      - /media/external/library/downloads:/downloads
      - /media/external2/library/downloads:/downloads2

  bazarr:
    restart: unless-stopped
    image: linuxserver/bazarr:latest
    container_name: bazarr
    networks:
      - caddy
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Asia/Jerusalem
    volumes:
      - /media/external/configs/bazarr:/config
      - /media/external/library/movies:/movies
      - /media/external/library/tv:/tv

  jellyfin:
    restart: unless-stopped
    image: linuxserver/jellyfin
    container_name: jellyfin
    network_mode: host
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Asia/Jerusalem
    volumes:
      - /media/external/configs/jellyfin:/config
      - /media/external/library/tv:/data/tvshows
      - /media/external/library/movies:/data/movies
      - type: tmpfs
        target: /tmp-transcoding
    ports:
      - 8096:8096
      - 8920:8920 #optional
      - 7359:7359/udp #optional
      - 1900:1900/udp #optional

  watchtower:
    restart: unless-stopped
    image: containrrr/watchtower
    container_name: watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: "--cleanup"
